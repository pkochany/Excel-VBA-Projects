' CODE USED TO CONVERT OPEN ORDERS RECEIVED FROM THE SUPPLIER OR CUSTOMER
' TO XML FORMAT WHICH IS THEN DRAG AND DROPPED INTO ERP SYSTEM


Sub f3()
' ONE XML FOR ONE ORDER '
    Dim succesCounter As Integer
    succesCounter = 0

    ' Open selected file and set both workbooks to variables
    Dim wbXxX As Workbook, wbAaA As Workbook
    Dim ws As Worksheet
    Dim vFile As Variant

    'Set source workbook
    Set wbXxX = ActiveWorkbook
    'Open the target workbook
    vFile = Application.GetOpenFilename("(.xls),*.xls,(.xlsx),*.xlsx,(.xlsm),*.xlsm", 1, "Select AaA Order Confirmation", , False)
        
    'if the user didn't select a file, exit sub
    If TypeName(vFile) = "Boolean" Then Exit Sub
    Workbooks.Open vFile
    'Set targetworkbook
    Set wbAaA = ActiveWorkbook
'======================================================================================================================================================'
    ' Before anything make sure a correct file is opened
    ' A1 cell for AaA excel always contain same sentence
    If T Item(Replace(CStr(wbAaA.Worksheets(1).Range("A1").Value), Chr$(160), Chr$(32))) = "AaA repp" Then

        wbAaA.Worksheets(1).Range("$A$2:$O$10000").AutoFilter
'======================================================================================================================================================'
        ' Clear "null" rows in AaA excel file, they are not confirmed'
        Dim clear_null_values As Integer
        clear_null_values = 3
        Dim clear_null_string As String
'======================================================================================================================================================'
        ' Remember to clear non-break spaces generated by AaA system for some unknown reason. '
        ' It is done below with Replace function. '
        For Each i In wbAaA.Worksheets(1).Range("$J$3:$J$10000")
            clear_null_string = CStr(i.Value)
            clear_null_string = Replace(clear_null_string, Chr$(160), Chr$(32))
            clear_null_string = T Item(clear_null_string)
            If clear_null_string = "null" Then
                wbAaA.Worksheets(1).Range(CStr(clear_null_values) & ":" & CStr(clear_null_values)).ClearContents
                clear_null_values = clear_null_values + 1
            Else
                clear_null_values = clear_null_values + 1
            End If
        Next i

        wbAaA.Worksheets(1).AutoFilter.Sort.SortFields.Clear
        wbAaA.Worksheets(1).AutoFilter.Sort.SortFields.Add Key:=Range("C3:C10000"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
        wbAaA.Worksheets(1).AutoFilter.Sort.SortFields.Add Key:=Range("D3:D10000"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
        wbAaA.Worksheets(1).AutoFilter.Sort.SortFields.Add Key:=Range("J3:J10000"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
        With wbAaA.Worksheets(1).AutoFilter.Sort
            .Header = xlYes
            .MatchCase = False
            .Orientation = xlTopToBottom
            .SortMethod = xlPinYin
            .Apply
        End With
'======================================================================================================================================================'
        Dim nr_of_orders As Integer
        nr_of_orders = 2
        Dim monitor_data_length As Long
        monitor_data_length = 0
'======================================================================================================================================================'
        'Count number of orders'
        For Each Order In wbAaA.Worksheets(1).Range("C3:C10000")
            If Order.Value <> "" Then
                nr_of_orders = nr_of_orders + 1
            End If
            If Order.Value = "" Then
                Exit For
            End If
        Next Order

        For Each i In wbXxX.Worksheets(4).Range("A1:A1000000")
            If i.Value <> "" Then
                monitor_data_length = monitor_data_length + 1
            End If
            If i.Value = "" Then
                Exit For
            End If
        Next i

        Dim row_add_counter As Long
        row_add_counter = 3
        Dim  Item_finder As Long
         Item_finder = 0

        For Each i In wbAaA.Worksheets(1).Range("O3:O" & CStr(nr_of_orders))
            pos_finder = 1
            For Each n In wbXxX.Worksheets(4).Range("A1:A" & CStr(monitor_data_length))
                If n.Value = CLng(T Item(Replace(CStr(wbAaA.Worksheets(1).Range("C" & CStr(row_add_counter)).Value), Chr$(160), Chr$(32)))) Then
                    For Each x In wbXxX.Worksheets(4).Range("B" & CStr(pos_finder) & ":B" & CStr(monitor_data_length))
                        If x.Value = T Item(Replace(CStr(wbAaA.Worksheets(1).Range("D" & CStr(row_add_counter))), Chr$(160), Chr$(32))) Then
                            wbAaA.Worksheets(1).Range("O" & CStr(row_add_counter)).Value = wbXxX.Worksheets(4).Range("C" & CStr(pos_finder)).Value
                            wbXxX.Worksheets(4).Range("A" & CStr(pos_finder)).Value = ""
                            wbXxX.Worksheets(4).Range("B" & CStr(pos_finder)).Value = ""
                            wbXxX.Worksheets(4).Range("C" & CStr(pos_finder)).Value = ""
                            Exit For
                        Else
                            pos_finder = pos_finder + 1
                        End If
                    Next x
                    Exit For
                Else
                    pos_finder = pos_finder + 1
                End If
            Next n
            row_add_counter = row_add_counter + 1
        Next i
'======================================================================================================================================================'
        Dim end_of_orders As String
        end_of_orders = "C" + CStr(nr_of_orders)
        Dim next_order_count As Integer
        next_order_count = 4
        Dim next_order As String
        next_order = "C" + CStr(next_order_count)
        Dim current_order_count As Integer
        current_order_count = 3
        Dim current_order As String
        current_order = "C" + CStr(current_order_count)
        Dim ranges_of_orders(1 To 10000, 1 To 2) As String
        Dim single_range As Integer
        single_range = 1
'======================================================================================================================================================'
        'Get endings of orders'
        For Each Order In wbAaA.Worksheets(1).Range("C3:" & end_of_orders)
            If Order = wbAaA.Worksheets(1).Range(next_order).Value Then
                next_order_count = next_order_count + 1
                current_order_count = current_order_count + 1
                next_order = "C" + CStr(next_order_count)
                current_order = "C" + CStr(current_order_count)
            Else
                next_order_count = next_order_count + 1
                
                ranges_of_orders(single_range, 1) = "C" + CStr(current_order_count)
                
                single_range = single_range + 1
                current_order_count = current_order_count + 1

                next_order = "C" + CStr(next_order_count)
                current_order = "C" + CStr(current_order_count)
            End If
        Next Order

        single_range = 1
        current_order_count = 3
        next_order_count = 2
        current_order = "C" + CStr(current_order_count)
        next_order = "C" + CStr(next_order_count)

        'Get beginnings of orders'
        For Each Order In wbAaA.Worksheets(1).Range("C3:" & end_of_orders)
            If Order = wbAaA.Worksheets(1).Range(next_order).Value Then
                next_order_count = next_order_count + 1
                current_order_count = current_order_count + 1
                next_order = "C" + CStr(next_order_count)
                current_order = "C" + CStr(current_order_count)
            Else
                next_order_count = next_order_count + 1
                
                ranges_of_orders(single_range, 2) = "C" + CStr(current_order_count)
                
                single_range = single_range + 1
                current_order_count = current_order_count + 1

                next_order = "C" + CStr(next_order_count)
                current_order = "C" + CStr(current_order_count)
            End If
        Next Order
'======================================================================================================================================================'
        Dim combined_count As Integer
        combined_count = 1
        Dim combined_ranges_of_orders(1 To 10000) As String
        Dim every_second_row As Integer
        every_second_row = 0
        Dim row_counter As Integer
        Dim column_counter As Integer
'======================================================================================================================================================'
        'Combine two level array into one'
        For row_counter = 1 To 10000
            For column_counter = 1 To 2
                combined_ranges_of_orders(combined_count) = ranges_of_orders(row_counter, column_counter) + combined_ranges_of_orders(combined_count)
            Next column_counter
            combined_count = combined_count + 1
        Next row_counter
'======================================================================================================================================================'
        Dim clear_ranges_of_orders As Variant
        Dim clear_counter As Integer
        clear_counter = 1
'======================================================================================================================================================'
        'Clear combined_ranges_of_orders array from empty fields'
        ReDim clear_ranges_of_orders(LBound(combined_ranges_of_orders) To UBound(combined_ranges_of_orders))
        For i = LBound(combined_ranges_of_orders) To UBound(combined_ranges_of_orders)
            If combined_ranges_of_orders(i) <> "" Then
                j = j + 1
                clear_ranges_of_orders(j) = combined_ranges_of_orders(i)
            End If
        Next i
        ReDim Preserve clear_ranges_of_orders(LBound(combined_ranges_of_orders) To j)
'======================================================================================================================================================'
        Dim left_piece As String
        Dim right_piece As String
        Dim array_counter As Integer
        Dim preserve_counter As Integer
        array_counter = 1
        preserve_counter = 1

        ReDim order_numbers(1 To 1) As String
        ReDim combined_pos_range(1 To 1) As String
        ReDim combined_ Item_number_range(1 To 1) As String
        ReDim combined_confirmed_date_range(1 To 1) As String
        ReDim combined_confirmed_quantity_range(1 To 1) As String
        ReDim combined_confirmed_price_range(1 To 1) As String
        Dim split_string() As String
'======================================================================================================================================================'
        'Weld together ranges for orders'
        For Each i In clear_ranges_of_orders
            ReDim Preserve order_numbers(1 To preserve_counter)
            ReDim Preserve combined_pos_range(1 To preserve_counter)
            ReDim Preserve combined_ Item_number_range(1 To preserve_counter)
            ReDim Preserve combined_confirmed_date_range(1 To preserve_counter)
            ReDim Preserve combined_confirmed_quantity_range(1 To preserve_counter)
            ReDim Preserve combined_confirmed_price_range(1 To preserve_counter)
            
            split_string() = Split(i, "C")
            left_piece = split_string(1)
            right_piece = split_string(2)
            
            clear_ranges_of_orders(array_counter) = "C" + left_piece + ":C" + right_piece

            combined_pos_range(array_counter) = "O" + left_piece + ":" + "O" + right_piece
            combined_ Item_number_range(array_counter) = "D" + left_piece + ":" + "D" + right_piece
            combined_confirmed_date_range(array_counter) = "J" + left_piece + ":" + "J" + right_piece
            combined_confirmed_quantity_range(array_counter) = "G" + left_piece + ":" + "G" + right_piece
            combined_confirmed_price_range(array_counter) = "N" + left_piece + ":" + "N" + right_piece
            
            order_numbers(array_counter) = "C" + left_piece
            
            array_counter = array_counter + 1
            preserve_counter = preserve_counter + 1
        Next i
'======================================================================================================================================================'
        Dim order_counter As Integer
        order_counter = 0
        Dim xml_nr As Integer
        xml_nr = 1
'======================================================================================================================================================'
        'Count number of orders
        For Each Order In order_numbers
            order_counter = order_counter + 1
        Next Order
'======================================================================================================================================================'
        ' Declarations for variables used in XML copy loop
        Dim how_many_rows_to_add As Integer
        Dim conf_rows_counter As Integer
        Dim conf_pos_range As String
        Dim conf_ Item_range As String
        Dim conf_date_range As String
        Dim conf_quantity_range As String
        Dim conf_price_range As String
        Dim add_row_counter As Integer
        Dim file_name As String
        Dim file_path As String
'======================================================================================================================================================'
        ' Copy data from single order, save as XML, clear and move to next order
        For xml_nr = 1 To order_counter
            ' Copy order number and paste to XxX Excel
            wbXxX.Worksheets(1).Range("C10").Value = T Item(Replace(CStr(wbAaA.Worksheets(1).Range(order_numbers(xml_nr)).Value), Chr$(160), Chr$(32)))

            ' Check if lines need to be added. One line is always there by default, that's why it's -1
            how_many_rows_to_add = -1
            For Each i In wbAaA.Worksheets(1).Range(combined_ Item_number_range(xml_nr))
                how_many_rows_to_add = how_many_rows_to_add + 1
            Next i
            ' If lines need to be added, add them
            If how_many_rows_to_add > 0 Then
                For add_row_counter = 1 To how_many_rows_to_add
                    wbXxX.Worksheets(1).Rows("31:31").Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrBelow
                Next add_row_counter
            End If

            conf_rows_counter = 31
            conf_pos_range = "E" + CStr(conf_rows_counter)
            conf_ Item_range = "F" + CStr(conf_rows_counter)
            conf_date_range = "Q" + CStr(conf_rows_counter)
            conf_quantity_range = "S" + CStr(conf_rows_counter)
            conf_price_range = "T" + CStr(conf_rows_counter)
            
            ' Copy all necessary data from AaA Excel to XxX Order Confirmation
            ' Copy order lines, t Item white spaces
            For Each i In wbAaA.Worksheets(1).Range(combined_pos_range(xml_nr))
                wbXxX.Worksheets(1).Range(conf_pos_range).Value = T Item(Replace(CStr(i.Value), Chr$(160), Chr$(32)))
                conf_rows_counter = conf_rows_counter + 1
                conf_pos_range = "E" + CStr(conf_rows_counter)
            Next i
            conf_rows_counter = 31
            ' Copy  Item numbers
            For Each i In wbAaA.Worksheets(1).Range(combined_ Item_number_range(xml_nr))
                wbXxX.Worksheets(1).Range(conf_ Item_range).Value = T Item(Replace(CStr(i.Value), Chr$(160), Chr$(32)))
                conf_rows_counter = conf_rows_counter + 1
                conf_ Item_range = "F" + CStr(conf_rows_counter)
            Next i
            conf_rows_counter = 31
            ' Copy confirmed date
            For Each i In wbAaA.Worksheets(1).Range(combined_confirmed_date_range(xml_nr))
                Dim formatDate As String
                Dim cutDay As String
                Dim cutMonth As String
                Dim cutYear As String
                Dim fullDate() As String
                fullDate = Split(Replace(CStr(i.Value), Chr$(160), Chr$(32)), "/")
                cutDay = T Item(fullDate(1))
                cutMonth = T Item(fullDate(0))
                cutYear = T Item(fullDate(2))
                formatDate = cutYear + "-" + cutMonth + "-" + cutDay

                wbXxX.Worksheets(1).Range(conf_date_range).Value = formatDate
                conf_rows_counter = conf_rows_counter + 1
                conf_date_range = "Q" + CStr(conf_rows_counter)
            Next i
            conf_rows_counter = 31
            ' Copy confirmed quantity
            For Each i In wbAaA.Worksheets(1).Range(combined_confirmed_quantity_range(xml_nr))
                wbXxX.Worksheets(1).Range(conf_quantity_range).Value = T Item(Replace(CStr(i.Value), Chr$(160), Chr$(32)))
                conf_rows_counter = conf_rows_counter + 1
                conf_quantity_range = "S" + CStr(conf_rows_counter)
            Next i
            conf_rows_counter = 31
            ' Copy confirmed price
            For Each i In wbAaA.Worksheets(1).Range(combined_confirmed_price_range(xml_nr))
                wbXxX.Worksheets(1).Range(conf_price_range).Value = T Item(Replace(CStr(i.Value), Chr$(160), Chr$(32)))
                conf_rows_counter = conf_rows_counter + 1
                conf_price_range = "T" + CStr(conf_rows_counter)
            Next i

            conf_rows_counter = conf_rows_counter - 1
            conf_price_range = "T" + CStr(conf_rows_counter)

            ' Make sure optional data have no empty cells
            If wbXxX.Worksheets(1).Range("C12").Value = "" Then
                wbXxX.Worksheets(1).Range("C12").Value = "'"
            End If
            If wbXxX.Worksheets(1).Range("C18").Value = "" Then
                wbXxX.Worksheets(1).Range("C18").Value = "'"
            End If
            If wbXxX.Worksheets(1).Range("C19").Value = "" Then
                wbXxX.Worksheets(1).Range("C19").Value = "'"
            End If
            If wbXxX.Worksheets(1).Range("C20").Value = "" Then
                wbXxX.Worksheets(1).Range("C20").Value = "'"
            End If
            If wbXxX.Worksheets(1).Range("C21").Value = "" Then
                wbXxX.Worksheets(1).Range("C21").Value = "'"
            End If
            If wbXxX.Worksheets(1).Range("C26").Value = "" Then
                wbXxX.Worksheets(1).Range("C26").Value = "'"
            End If

            ' Make sure data in columns are set properly
            For Each i In wbXxX.Worksheets(1).Range("G31:G" & CStr(conf_rows_counter))
                i.Value = 5
            Next i
            For Each i In wbXxX.Worksheets(1).Range("J31:K" & CStr(conf_rows_counter))
                i.Value = "'"
            Next i
            For Each i In wbXxX.Worksheets(1).Range("P31:P" & CStr(conf_rows_counter))
                i.Value = "'"
            Next i
            For Each i In wbXxX.Worksheets(1).Range("R31:R" & CStr(conf_rows_counter))
                i.Value = "'"
            Next i
            For Each i In wbXxX.Worksheets(1).Range("L31:N" & CStr(conf_rows_counter))
                i.Value = 0
            Next i
            For Each i In wbXxX.Worksheets(1).Range("O31:O" & CStr(conf_rows_counter))
                i.Value = 1
            Next i
            For Each i In wbXxX.Worksheets(1).Range("H31:H" & CStr(conf_rows_counter))
                i.Value = "'"
            Next i
            For Each i In wbXxX.Worksheets(1).Range("I31:I" & CStr(conf_rows_counter))
                i.Value = "'"
            Next i

            ' Declare order number to be used in name
            file_name = CStr(wbXxX.Worksheets(1).Range("C10").Value)

            ' Check if folder on desktop exist if not create it
            If Dir(Environ("USERPROFILE") & "\Desktop\", vbDirectory) = "" Then
                MkDir Environ("USERPROFILE") & "\Desktop\"
            End If

            ' Declare file path
            file_path = Environ("USERPROFILE") & "\Desktop\XML Order nr" & file_name & ".xml"
            
            ' Check if file exists, if so delete and save new
            If Dir(file_path, vbDirectory) <> "" Then
                ' Remove readonly
                SetAttr file_path, vbNormal
                ' Delete file
                Kill file_path
                ' Save new
                wbXxX.XmlMaps("asd").Export Url:=file_path
            Else
                wbXxX.XmlMaps("asddd").Export Url:=file_path
            End If

            ' Clear extra fields, leave only one and clear values
            conf_rows_counter = conf_rows_counter + 1
            wbXxX.Worksheets(1).Range("32:" & CStr(conf_rows_counter)).Delete Shift:=xlUp
            wbXxX.Worksheets(1).Range("E31").Value = "'"
            wbXxX.Worksheets(1).Range("F31").Value = "'"
            wbXxX.Worksheets(1).Range("H31").Value = "'"
            wbXxX.Worksheets(1).Range("I31").Value = "'"
            wbXxX.Worksheets(1).Range("Q31").Value = "'"
            wbXxX.Worksheets(1).Range("S31").Value = "'"
            wbXxX.Worksheets(1).Range("T31").Value = "'"
            wbXxX.Worksheets(1).Range("C10").Value = "'"
            wbXxX.Worksheets(1).Range("C12").Value = "'"
            wbXxX.Worksheets(1).Range("C18:C21").Value = "'"
            wbXxX.Worksheets(1).Range("C26").Value = "'"

            succesCounter = succesCounter + 1

        Next xml_nr
        ' After all files are saved close AaA excel
        wbAaA.Close SaveChanges:=False
    Else
        ' If other file is picked show error msg and close the file
        MsgBox "error."
        wbAaA.Close SaveChanges:=False
    End If
    
    If succesCounter > 0 Then
        MsgBox "ok."
    End If

End Sub

Sub f6()
' ONE XML FOR ONE ORDER '
    Dim succesCounter As Integer
    succesCounter = 0

    ' Open selected file and set both workbooks to variables
    Dim wbXxX As Workbook, wbYyY As Workbook
    Dim ws As Worksheet
    Dim vFile As Variant

    'Set source workbook
    Set wbXxX = ActiveWorkbook
    'Open the target workbook
    vFile = Application.GetOpenFilename("(.xls),*.xls,(.xlsx),*.xlsx,(.xlsm),*.xlsm", 1, "Select YyY Order Confirmation", , False)
        
    'if the user didn't select a file, exit sub
    If TypeName(vFile) = "Boolean" Then Exit Sub
    Workbooks.Open vFile
    'Set targetworkbook
    Set wbYyY = ActiveWorkbook
'======================================================================================================================================================'
    ' Before anything make sure a correct file is opened
    ' L1 cell for YyY excel always contain same sentence
    If T Item(Replace(CStr(wbYyY.Worksheets(1).Range("L1").Value), Chr$(160), Chr$(32))) = "Current Schedule Dock Date" Then
        wbYyY.Worksheets(1).Range("$A$2:$M$10000").AutoFilter
'======================================================================================================================================================'
        ' Sort table to have one orders grouped properly. '
        ActiveWorkbook.Worksheets("Report").Sort.SortFields.Clear
        ActiveWorkbook.Worksheets("Report").Sort.SortFields.Add Key:=Range("C2:C10000") _
        , SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
        With ActiveWorkbook.Worksheets(1).Sort
            .SetRange Range("A1:M10000")
            .Header = xlYes
            .MatchCase = False
            .Orientation = xlTopToBottom
            .SortMethod = xlPinYin
            .Apply
        End With
'======================================================================================================================================================'
        ' Count number of orders '
        Dim nr_of_orders As Integer
        nr_of_orders = 1
        
        For Each Order In wbYyY.Worksheets(1).Range("C2:C10000")
            If Order.Value <> "" Then
                nr_of_orders = nr_of_orders + 1
            End If
            If Order.Value = "" Then
                Exit For
            End If
        Next Order
'======================================================================================================================================================'
        Dim end_of_orders As String
        end_of_orders = "C" + CStr(nr_of_orders)
        Dim next_order_count As Integer
        next_order_count = 3
        Dim next_order As String
        next_order = "C" + CStr(next_order_count)
        Dim current_order_count As Integer
        current_order_count = 2
        Dim current_order As String
        current_order = "C" + CStr(current_order_count)
        Dim ranges_of_orders(1 To 10000, 1 To 2) As String
        Dim single_range As Integer
        single_range = 1
'======================================================================================================================================================'
        'Get endings of orders'
        Dim orderTextClear As String
        Dim nextOrderTextClear As String
        Dim previousOrderTextClear As String
        Dim charLocation As Long
        For Each Order In wbYyY.Worksheets(1).Range("C2:" & end_of_orders)
            ' get order number out of column C '
            orderTextClear = CStr(Order)
            nextOrderTextClear = CStr(wbYyY.Worksheets(1).Range(next_order).Value)
            If InStr(orderTextClear, "*") > 0 Then
                charLocation = InStr(orderTextClear, "*") - 1
                orderTextClear = Left(orderTextClear, charLocation)
            ElseIf InStr(orderTextClear, "*") = 0 Then
                charLocation = InStr(orderTextClear, "/") - 1
                orderTextClear = Left(orderTextClear, charLocation)
            End If
            ' get next order number out of column C to DISTINGUISH '
            If nextOrderTextClear <> "" Then
                If InStr(nextOrderTextClear, "*") > 0 Then
                    charLocation = InStr(nextOrderTextClear, "*") - 1
                    nextOrderTextClear = Left(nextOrderTextClear, charLocation)
                ElseIf InStr(nextOrderTextClear, "*") = 0 Then
                    charLocation = InStr(nextOrderTextClear, "/") - 1
                    nextOrderTextClear = Left(nextOrderTextClear, charLocation)
                End If
            End If
            ' make magic happen '
            If orderTextClear = nextOrderTextClear Then
                next_order_count = next_order_count + 1
                current_order_count = current_order_count + 1
                next_order = "C" + CStr(next_order_count)
                current_order = "C" + CStr(current_order_count)
            Else
                next_order_count = next_order_count + 1
                
                ranges_of_orders(single_range, 1) = "C" + CStr(current_order_count)
                
                single_range = single_range + 1
                current_order_count = current_order_count + 1

                next_order = "C" + CStr(next_order_count)
                current_order = "C" + CStr(current_order_count)
            End If
        Next Order

        Dim previousOrderCount As Long
        single_range = 1
        current_order_count = 2
        previousOrderCount = 1
        current_order = "C" + CStr(current_order_count)
        previous_order = "C" + CStr(previousOrderCount)

        'Get beginnings of orders'
        For Each Order In wbYyY.Worksheets(1).Range("C2:" & end_of_orders)
            ' get order number out of column C '
            orderTextClear = CStr(Order)
            previousOrderTextClear = wbYyY.Worksheets(1).Range(previous_order).Value
            If InStr(orderTextClear, "*") > 0 Then
                charLocation = InStr(orderTextClear, "*") - 1
                orderTextClear = Left(orderTextClear, charLocation)
            ElseIf InStr(orderTextClear, "*") = 0 Then
                charLocation = InStr(orderTextClear, "/") - 1
                orderTextClear = Left(orderTextClear, charLocation)
            End If
            ' get previous order number out of column C to DISTINGUISH '
            If InStr(previousOrderTextClear, "*") > 0 Then
                charLocation = InStr(previousOrderTextClear, "*") - 1
                previousOrderTextClear = Left(previousOrderTextClear, charLocation)
            ElseIf InStr(previousOrderTextClear, "*") = 0 Then
                charLocation = InStr(previousOrderTextClear, "/") - 1
                previousOrderTextClear = Left(previousOrderTextClear, charLocation)
            End If
            ' make magic happen '
            If orderTextClear = previousOrderTextClear Then
                previousOrderCount = previousOrderCount + 1
                current_order_count = current_order_count + 1
                previous_order = "C" + CStr(previousOrderCount)
                current_order = "C" + CStr(current_order_count)
            Else
                previousOrderCount = previousOrderCount + 1
                
                ranges_of_orders(single_range, 2) = "C" + CStr(current_order_count)
                
                single_range = single_range + 1
                current_order_count = current_order_count + 1

                previous_order = "C" + CStr(previousOrderCount)
                current_order = "C" + CStr(current_order_count)
            End If
        Next Order
'======================================================================================================================================================'
        Dim combined_count As Integer
        combined_count = 1
        Dim combined_ranges_of_orders(1 To 10000) As String
        Dim every_second_row As Integer
        every_second_row = 0
        Dim row_counter As Integer
        Dim column_counter As Integer
'======================================================================================================================================================'
        'Combine two level array into one'
        For row_counter = 1 To 10000
            For column_counter = 1 To 2
                combined_ranges_of_orders(combined_count) = ranges_of_orders(row_counter, column_counter) + combined_ranges_of_orders(combined_count)
            Next column_counter
            combined_count = combined_count + 1
        Next row_counter
'======================================================================================================================================================'
        Dim clear_ranges_of_orders As Variant
        Dim clear_counter As Integer
        clear_counter = 1
'======================================================================================================================================================'
        'Clear combined_ranges_of_orders array from empty fields'
        ReDim clear_ranges_of_orders(LBound(combined_ranges_of_orders) To UBound(combined_ranges_of_orders))
        For i = LBound(combined_ranges_of_orders) To UBound(combined_ranges_of_orders)
            If combined_ranges_of_orders(i) <> "" Then
                j = j + 1
                clear_ranges_of_orders(j) = combined_ranges_of_orders(i)
            End If
        Next i
        ReDim Preserve clear_ranges_of_orders(LBound(combined_ranges_of_orders) To j)
'======================================================================================================================================================'
        Dim left_piece As String
        Dim right_piece As String
        Dim array_counter As Integer
        Dim preserve_counter As Integer
        array_counter = 1
        preserve_counter = 1

        ReDim order_numbers(1 To 1) As String
        ReDim combined_pos_range(1 To 1) As String
        ReDim combined_ Item_number_range(1 To 1) As String
        ReDim combined_confirmed_date_range(1 To 1) As String
        ReDim combined_confirmed_quantity_range(1 To 1) As String
        ReDim combined_confirmed_price_range(1 To 1) As String
        Dim split_string() As String
'======================================================================================================================================================'
        'Weld together ranges for orders'
        For Each i In clear_ranges_of_orders
            ReDim Preserve order_numbers(1 To preserve_counter)
            ReDim Preserve combined_pos_range(1 To preserve_counter)
            ReDim Preserve combined_ Item_number_range(1 To preserve_counter)
            ReDim Preserve combined_confirmed_date_range(1 To preserve_counter)
            ReDim Preserve combined_confirmed_quantity_range(1 To preserve_counter)
            ReDim Preserve combined_confirmed_price_range(1 To preserve_counter)
            
            split_string() = Split(i, "C")
            left_piece = split_string(1)
            right_piece = split_string(2)
            
            clear_ranges_of_orders(array_counter) = "C" + left_piece + ":C" + right_piece
            combined_pos_range(array_counter) = "B" + left_piece + ":" + "B" + right_piece
            combined_ Item_number_range(array_counter) = "G" + left_piece + ":" + "G" + right_piece
            combined_confirmed_date_range(array_counter) = "L" + left_piece + ":" + "L" + right_piece
            combined_confirmed_quantity_range(array_counter) = "I" + left_piece + ":" + "I" + right_piece
            
            order_numbers(array_counter) = "C" + left_piece
            
            array_counter = array_counter + 1
            preserve_counter = preserve_counter + 1
        Next i
'======================================================================================================================================================'
        Dim order_counter As Integer
        order_counter = 0
        Dim xml_nr As Integer
        xml_nr = 1
'======================================================================================================================================================'
        'Count number of orders
        For Each Order In order_numbers
            order_counter = order_counter + 1
        Next Order
'======================================================================================================================================================'
        ' Declarations for variables used in XML copy loop
        Dim how_many_rows_to_add As Integer
        Dim conf_rows_counter As Integer
        Dim conf_pos_range As String
        Dim conf_ Item_range As String
        Dim conf_date_range As String
        Dim conf_quantity_range As String
        Dim conf_price_range As String
        Dim add_row_counter As Integer
        Dim file_name As String
        Dim file_path As String
        Dim getOrderFromText As String
        Dim locationInText As Long
'======================================================================================================================================================'
        ' Copy data from single order, save as XML, clear and move to next order
        For xml_nr = 1 To order_counter
            ' Copy order number and paste to XxX Excel
            getOrderFromText = T Item(Replace(CStr(wbYyY.Worksheets(1).Range(order_numbers(xml_nr)).Value), Chr$(160), Chr$(32)))
            If InStr(getOrderFromText, "*") > 0 Then
                locationInText = InStr(getOrderFromText, "*") - 1
                getOrderFromText = Left(getOrderFromText, locationInText)
            ElseIf InStr(getOrderFromText, "*") = 0 Then
                locationInText = InStr(getOrderFromText, "/") - 1
                getOrderFromText = Left(getOrderFromText, locationInText)
            End If
            wbXxX.Worksheets(1).Range("C10").Value = getOrderFromText

            ' Check if lines need to be added. One line is always there by default, that's why it's -1
            how_many_rows_to_add = -1
            For Each i In wbYyY.Worksheets(1).Range(combined_ Item_number_range(xml_nr))
                how_many_rows_to_add = how_many_rows_to_add + 1
            Next i
            ' If lines need to be added, add them
            If how_many_rows_to_add > 0 Then
                For add_row_counter = 1 To how_many_rows_to_add
                    wbXxX.Worksheets(1).Rows("31:31").Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrBelow
                Next add_row_counter
            End If

            conf_rows_counter = 31
            conf_pos_range = "E" + CStr(conf_rows_counter)
            conf_ Item_range = "F" + CStr(conf_rows_counter)
            conf_date_range = "Q" + CStr(conf_rows_counter)
            conf_quantity_range = "S" + CStr(conf_rows_counter)
            conf_price_range = "T" + CStr(conf_rows_counter)
            
            ' Copy all necessary data from AaA Excel to XxX Order Confirmation
            ' Copy order lines, t Item white spaces
            For Each i In wbYyY.Worksheets(1).Range(combined_pos_range(xml_nr))
                wbXxX.Worksheets(1).Range(conf_pos_range).Value = T Item(Replace(CStr(i.Value), Chr$(160), Chr$(32)))
                conf_rows_counter = conf_rows_counter + 1
                conf_pos_range = "E" + CStr(conf_rows_counter)
            Next i
            conf_rows_counter = 31
            ' Copy  Item numbers
            For Each i In wbYyY.Worksheets(1).Range(combined_ Item_number_range(xml_nr))
                wbXxX.Worksheets(1).Range(conf_ Item_range).Value = T Item(Replace(CStr(i.Value), Chr$(160), Chr$(32)))
                conf_rows_counter = conf_rows_counter + 1
                conf_ Item_range = "F" + CStr(conf_rows_counter)
            Next i
            conf_rows_counter = 31
            ' Copy confirmed date
            For Each i In wbYyY.Worksheets(1).Range(combined_confirmed_date_range(xml_nr))
                Dim rawDate As String
                Dim formatDate As String
                Dim cutDay As String
                Dim cutMonth As String
                Dim cutYear As String
                rawDate = T Item(Replace(CStr(i.Value), Chr$(160), Chr$(32)))
                cutDay = CInt(Left(rawDate, 2) + 5)
                cutMonth = Left(rawDate, 5)
                cutMonth = CInt(Right(cutMonth, 2))
                cutYear = Right(rawDate, 4)
                cutMonthInt = cutMonth
                cutDayInt = cutDay
                cutYearInt = cutYear

                If cutMonthInt = 1 And cutDayInt > 31 Then
                    cutMonthInt = cutMonthInt + 1
                    cutDayInt = cutDayInt - 31
                End If
                If cutMonthInt = 2 And cutDayInt > 28 Then
                    cutMonthInt = cutMonthInt + 1
                    cutDayInt = cutDayInt - 28
                End If
                If cutMonthInt = 3 And cutDayInt > 31 Then
                    cutMonthInt = cutMonthInt + 1
                    cutDayInt = cutDayInt - 31
                End If
                If cutMonthInt = 4 And cutDayInt > 30 Then
                    cutMonthInt = cutMonthInt + 1
                    cutDayInt = cutDayInt - 30
                End If
                If cutMonthInt = 5 And cutDayInt > 31 Then
                    cutMonthInt = cutMonthInt + 1
                    cutDayInt = cutDayInt - 31
                End If
                If cutMonthInt = 6 And cutDayInt > 30 Then
                    cutMonthInt = cutMonthInt + 1
                    cutDayInt = cutDayInt - 30
                End If
                If cutMonthInt = 7 And cutDayInt > 31 Then
                    cutMonthInt = cutMonthInt + 1
                    cutDayInt = cutDayInt - 31
                End If
                If cutMonthInt = 8 And cutDayInt > 31 Then
                    cutMonthInt = cutMonthInt + 1
                    cutDayInt = cutDayInt - 31
                End If
                If cutMonthInt = 9 And cutDayInt > 30 Then
                    cutMonthInt = cutMonthInt + 1
                    cutDayInt = cutDayInt - 30
                End If
                If cutMonthInt = 10 And cutDayInt > 31 Then
                    cutMonthInt = cutMonthInt + 1
                    cutDayInt = cutDayInt - 31
                End If
                If cutMonthInt = 11 And cutDayInt > 30 Then
                    cutMonthInt = cutMonthInt + 1
                    cutDayInt = cutDayInt - 30
                End If
                If cutMonthInt = 12 And cutDayInt > 31 Then
                    cutMonthInt = 1
                    cutDayInt = cutDayInt - 31
                    cutYearInt = cutYearInt + 1
                End If

                formatDate = CStr(cutYearInt) + "-" + CStr(cutMonthInt) + "-" + CStr(cutDayInt)

                wbXxX.Worksheets(1).Range(conf_date_range).Value = formatDate
                conf_rows_counter = conf_rows_counter + 1
                conf_date_range = "Q" + CStr(conf_rows_counter)
            Next i
            conf_rows_counter = 31
            ' Copy confirmed quantity
            For Each i In wbYyY.Worksheets(1).Range(combined_confirmed_quantity_range(xml_nr))
                wbXxX.Worksheets(1).Range(conf_quantity_range).Value = T Item(Replace(CStr(i.Value), Chr$(160), Chr$(32)))
                conf_rows_counter = conf_rows_counter + 1
                conf_quantity_range = "S" + CStr(conf_rows_counter)
            Next i
            
            Dim importOrderLength As Long
            importOrderLength = 31
            For Each i In wbXxX.Worksheets(1).Range("F32:F10000")
                If i <> "" Then
                    importOrderLength = importOrderLength + 1
                End If
                If i = "" Then
                    Exit For
                End If
            Next i
            
            Dim priceOutput As Long
            priceOutput = 30
            Dim priceInput As Long
            
            
            For Each i In wbXxX.Worksheets(1).Range("F31:F" & importOrderLength)
                priceOutput = priceOutput + 1
                priceInput = 1
                For Each e In wbXxX.Worksheets("MonitorYyYPrices").Range("A2:A100000")
                    priceInput = priceInput + 1
                    If i = e Then
                        wbXxX.Worksheets(1).Range("T" & priceOutput).Value = wbXxX.Worksheets("MonitorYyYPrices").Range("B" & priceInput).Value
                        Exit For
                    End If
                    If e = "" Then
                        Exit For
                    End If
                Next e
            Next i

            ' Make sure optional data have no empty cells
            If wbXxX.Worksheets(1).Range("C12").Value = "" Then
                wbXxX.Worksheets(1).Range("C12").Value = "'"
            End If
            If wbXxX.Worksheets(1).Range("C18").Value = "" Then
                wbXxX.Worksheets(1).Range("C18").Value = "'"
            End If
            If wbXxX.Worksheets(1).Range("C19").Value = "" Then
                wbXxX.Worksheets(1).Range("C19").Value = "'"
            End If
            If wbXxX.Worksheets(1).Range("C20").Value = "" Then
                wbXxX.Worksheets(1).Range("C20").Value = "'"
            End If
            If wbXxX.Worksheets(1).Range("C21").Value = "" Then
                wbXxX.Worksheets(1).Range("C21").Value = "'"
            End If
            If wbXxX.Worksheets(1).Range("C26").Value = "" Then
                wbXxX.Worksheets(1).Range("C26").Value = "'"
            End If

            ' Make sure data in columns are set properly
            For Each i In wbXxX.Worksheets(1).Range("G31:G" & CStr(importOrderLength))
                i.Value = 5
            Next i
            For Each i In wbXxX.Worksheets(1).Range("J31:K" & CStr(importOrderLength))
                i.Value = "'"
            Next i
            For Each i In wbXxX.Worksheets(1).Range("P31:P" & CStr(importOrderLength))
                i.Value = "'"
            Next i
            For Each i In wbXxX.Worksheets(1).Range("R31:R" & CStr(importOrderLength))
                i.Value = "'"
            Next i
            For Each i In wbXxX.Worksheets(1).Range("L31:N" & CStr(importOrderLength))
                i.Value = 0
            Next i
            For Each i In wbXxX.Worksheets(1).Range("O31:O" & CStr(importOrderLength))
                i.Value = 1
            Next i
            For Each i In wbXxX.Worksheets(1).Range("H31:H" & CStr(importOrderLength))
                i.Value = "'"
            Next i
            For Each i In wbXxX.Worksheets(1).Range("I31:I" & CStr(importOrderLength))
                i.Value = "'"
            Next i

            ' Declare order number to be used in name
            file_name = CStr(wbXxX.Worksheets(1).Range("C10").Value)

            ' Check if folder on desktop exist if not create it
            If Dir(Environ("USERPROFILE") & "\Desktop\YyY XML\", vbDirectory) = "" Then
                MkDir Environ("USERPROFILE") & "\Desktop\YyY XML\"
            End If

            ' Declare file path
            file_path = Environ("USERPROFILE") & "\Desktop\YyY XML\XML Order nr " & file_name & ".xml"
            
            ' Check if file exists, if so delete and save new
            If Dir(file_path, vbDirectory) <> "" Then
                ' Remove readonly
                SetAttr file_path, vbNormal
                ' Delete file
                Kill file_path
                ' Save new
                wbXxX.XmlMaps("ORDRSP419_mapa").Export Url:=file_path
            Else
                wbXxX.XmlMaps("ORDRSP419_mapa").Export Url:=file_path
            End If

            ' Clear extra fields, leave only one and clear values
            conf_rows_counter = conf_rows_counter + 1
            wbXxX.Worksheets(1).Range("32:" & CStr(importOrderLength)).Delete Shift:=xlUp
            wbXxX.Worksheets(1).Range("E31").Value = "'"
            wbXxX.Worksheets(1).Range("F31").Value = "'"
            wbXxX.Worksheets(1).Range("H31").Value = "'"
            wbXxX.Worksheets(1).Range("I31").Value = "'"
            wbXxX.Worksheets(1).Range("Q31").Value = "'"
            wbXxX.Worksheets(1).Range("S31").Value = "'"
            wbXxX.Worksheets(1).Range("T31").Value = "'"
            wbXxX.Worksheets(1).Range("C10").Value = "'"
            wbXxX.Worksheets(1).Range("C12").Value = "'"
            wbXxX.Worksheets(1).Range("C18:C21").Value = "'"
            wbXxX.Worksheets(1).Range("C26").Value = "'"

            succesCounter = succesCounter + 1

        Next xml_nr
        ' After all files are saved close AaA excel
        wbYyY.Close SaveChanges:=False
    Else
        ' If other file is picked show error msg and close the file
        MsgBox "Incorrect file, please try again with AaA Excel."
        wbYyY.Close SaveChanges:=False
    End If
    
    If succesCounter > 0 Then
        MsgBox "Data import complete."
    End If

End Sub

Sub ZzZXmlConvert()
    Dim succesCounter As Integer
    succesCounter = 0

    ' Open selected file and set both workbooks to variables
    Dim wbXxX As Workbook, wbZzZ As Workbook
    Dim ws As Worksheet
    Dim vFile As Variant

    'Set source workbook
    Set wbXxX = ActiveWorkbook
    'Open the target workbook
    vFile = Application.GetOpenFilename("(.xls),*.xls,(.xlsx),*.xlsx,(.xlsm),*.xlsm", 1, "Select ZzZ Excel", , False)
        
    'if the user didn't select a file, exit sub
    If TypeName(vFile) = "Boolean" Then Exit Sub
    Workbooks.Open vFile
    'Set targetworkbook
    Set wbZzZ = ActiveWorkbook
'======================================================================================================================================================'
    ' Before anything make sure a correct file is opened
    ' L1 cell for YyY excel always contain same sentence
    If Left(Replace(CStr(wbZzZ.Worksheets(1).Range("A3").Value), Chr$(160), Chr$(32)), 5) = "START" Then

        wbXxX.Sheets("CUSTOMER_DATA").Range("A1").ListObject.QueryTable.Refresh BackgroundQuery:=False
'======================================================================================================================================================'
        ' Count number of lines '
        Dim nr_of_lines As Long
        nr_of_lines = 2
        
        For Each i In wbZzZ.Worksheets(1).Range("A3:A100000")
            If i.Value <> "" Then
                nr_of_lines = nr_of_lines + 1
            End If
            If i.Value = "" Then
                Exit For
            End If
        Next i

        Dim end_of_lines As String
        end_of_lines = "A" + CStr(nr_of_lines)

        Dim nr_of_harnesses As Long
        nr_of_harnesses = 0
        
        For Each i In wbZzZ.Worksheets(1).Range("A3:" & end_of_lines)
            If Left(CStr(i.Value), 19) = "4_10__tdpur401.item" Then
                nr_of_harnesses = nr_of_harnesses + 1
            End If
        Next i

        ' SET ORDER NUMBER '
        For Each i In wbZzZ.Worksheets(1).Range("A3:" & end_of_lines)
            If Left(CStr(i.Value), 22) = "3_1_orco_tdpur400.orno" Then
                wbXxX.Worksheets("XxX Sales Order").Range("B5").Value = LT Item(Right(CStr(i.Value), (Len(CStr(i.Value)) - 22)))
                i.Value = ""
                Exit For
            End If
        Next i
    ' SET ORDER DATE '
        For Each i In wbZzZ.Worksheets(1).Range("A3:" & end_of_lines)
            If Left(CStr(i.Value), 22) = "3_50_orco_rprt.planner" Then
                wbXxX.Worksheets("XxX Sales Order").Range("B21").Value = LT Item(Right(CStr(i.Value), (Len(CStr(i.Value)) - 22)))
                i.Value = ""
                Exit For
            End If
        Next i
    ' SET ORDER PERSON '
        For Each i In wbZzZ.Worksheets(1).Range("A3:" & end_of_lines)
            If Left(CStr(i.Value), 23) = "3_50_orco_tdpur400.odat" Then
                wbXxX.Worksheets("XxX Sales Order").Range("B27").Value = LT Item(Right(CStr(i.Value), (Len(CStr(i.Value)) - 23)))
                i.Value = ""
                Exit For
            End If
        Next i

        Dim row_number As Long
        row_number = 40
        Dim row_location As String
        row_location = "C" & CStr(row_number)
        Dim row_type As String
        row_type = "D" & CStr(row_number)
        Dim discount_col As String
        discount_col = "N" & CStr(row_number)
        Dim setup_col As String
        setup_col = "O" & CStr(row_number)
        Dim alloy_col As String
        alloy_col = "P" & CStr(row_number)
        Dim row_counter As String
        row_counter = 1
        Dim file_name As String
        file_name = ""
        Dim text_col As String
        text_col = "H" & CStr(row_number)
        Dim qty_col As String
        qty_col = "J" & CStr(row_number)
        Dim unit_col As String
        unit_col = "K" & CStr(row_number)
        Dim rev_col As String
        rev_col = "G" & CStr(row_number)
        Dim del_col As String
        del_col = "L" & CStr(row_number)
        Dim price_col As String
        price_col = "M" & CStr(row_number)
        Dim part_no_col As String
        part_no_col = "E" & CStr(row_number)
        Dim sup_part_no_col As String
        sup_part_no_col = "F" & CStr(row_number)
        Dim ref_no_col As String
        ref_no_col = "I" & CStr(row_number)

        Dim customer_data_length As Long
        customer_data_length = 1
        For Each i In wbXxX.Worksheets("CUSTOMER_DATA").Range("B2:B100000")
            If i.Value <> "" Then
                customer_data_length = customer_data_length + 1
            End If
            If i.Value = "" Then
                Exit For
            End If
        Next i

        Dim  Item_row_count As Long
         Item_row_count = 40
        For add_row = 1 To nr_of_harnesses
            wbXxX.Worksheets("XxX Sales Order").Rows("40:40").Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrBelow
             Item_row_count =  Item_row_count + 1
        Next add_row
'======================================================================================================================================================'
        ' Copy data from single order, save as XML, clear and move to next order
        For position_number = 1 To nr_of_harnesses

            wbXxX.Worksheets("XxX Sales Order").Range(row_location).Value = row_counter
            wbXxX.Worksheets("XxX Sales Order").Range(row_type).Value = 1
            wbXxX.Worksheets("XxX Sales Order").Range(discount_col).Value = 0
            wbXxX.Worksheets("XxX Sales Order").Range(setup_col).Value = 0
            wbXxX.Worksheets("XxX Sales Order").Range(alloy_col).Value = 0

            ' COPY TEXT '
            For Each i In wbZzZ.Worksheets(1).Range("A3:" & end_of_lines)
                If Left(CStr(i.Value), 14) = "4_10__itm.dsca" Then
                    wbXxX.Worksheets("XxX Sales Order").Range(text_col).Value = LT Item(Right(CStr(i.Value), (Len(CStr(i.Value)) - 14)))
                    i.Value = ""
                    Exit For
                End If
            Next i
            ' COPY QUANTITY '
            For Each i In wbZzZ.Worksheets(1).Range("A3:" & end_of_lines)
                If Left(CStr(i.Value), 14) = "4_10__quantity" Then
                    wbXxX.Worksheets("XxX Sales Order").Range(qty_col).Value = LT Item(Right(CStr(i.Value), (Len(CStr(i.Value)) - 14)))
                    i.Value = ""
                    Exit For
                End If
            Next i
            ' COPY UNIT '
            For Each i In wbZzZ.Worksheets(1).Range("A3:" & end_of_lines)
                If Left(CStr(i.Value), 15) = "4_10__quan.unit" Then
                    wbXxX.Worksheets("XxX Sales Order").Range(unit_col).Value = LT Item(Right(CStr(i.Value), (Len(CStr(i.Value)) - 15)))
                    i.Value = ""
                    Exit For
                End If
            Next i
            ' COPY REVISION '
            For Each i In wbZzZ.Worksheets(1).Range("A3:" & end_of_lines)
                If Left(CStr(i.Value), 19) = "4_10__tiedm100.drre" Then
                    wbXxX.Worksheets("XxX Sales Order").Range(rev_col).Value = LT Item(Right(CStr(i.Value), (Len(CStr(i.Value)) - 19)))
                    i.Value = ""
                    Exit For
                End If
            Next i
            ' COPY DELIVERY PERIOD '
            For Each i In wbZzZ.Worksheets(1).Range("A3:" & end_of_lines)
                If Left(CStr(i.Value), 19) = "4_10__tdpur401.pddt" Then
                    wbXxX.Worksheets("XxX Sales Order").Range(del_col).Value = Left(LT Item(Right(CStr(i.Value), (Len(CStr(i.Value)) - 19))), 10)
                    i.Value = ""
                    Exit For
                End If
            Next i
            ' COPY EACH '
            For Each i In wbZzZ.Worksheets(1).Range("A3:" & end_of_lines)
                If Left(CStr(i.Value), 24) = "4_10__tdpur401.pric_COND" Then
                    wbXxX.Worksheets("XxX Sales Order").Range(price_col).Value = LT Item(Right(CStr(i.Value), (Len(CStr(i.Value)) - 24)))
                    i.Value = ""
                    Exit For
                End If
            Next i
            ' COPY / FIGURE OUT PART NUMBER, IT CAN EITHER BE HARNESS OR  Item. FIRST CHECK  Item THEN HARNESS '
            Dim success_counter As Long
            success_counter = 0
            Dim current_data_row As Long
            current_data_row = 1
            Dim part_no_placeholder As String
            part_no_placeholder = ""
            For Each i In wbZzZ.Worksheets(1).Range("A3:" & end_of_lines)
                If Left(CStr(i.Value), 19) = "4_10__tiedm100.drno" Then
                    part_no_placeholder = LT Item(Right(CStr(i.Value), (Len(CStr(i.Value)) - 19)))
                    If part_no_placeholder = "" Then
                        Exit For
                    End If
                    For Each n In wbXxX.Worksheets("CUSTOMER_DATA").Range("A2:A" & customer_data_length)
                        current_data_row = current_data_row + 1
                        If n.Value = part_no_placeholder Then
                            wbXxX.Worksheets("XxX Sales Order").Range(part_no_col).Value = part_no_placeholder
                            wbXxX.Worksheets("XxX Sales Order").Range(ref_no_col).Value = part_no_placeholder
                            wbXxX.Worksheets("XxX Sales Order").Range(sup_part_no_col).Value = wbZzZ.Worksheets(1).Range("B" & current_data_row).Value
                            success_counter = 1
                            Exit For
                        End If
                    Next n
                    i.Value = ""
                    Exit For
                End If
            Next i

            If success_counter = 0 Then
                For Each i In wbZzZ.Worksheets(1).Range("A3:" & end_of_lines)
                    If Left(CStr(i.Value), 19) = "4_10__tdpur401.item" Then
                        part_no_placeholder = LT Item(Right(CStr(i.Value), (Len(CStr(i.Value)) - 19)))
                        For Each n In wbXxX.Worksheets("CUSTOMER_DATA").Range("A2:A" & customer_data_length)
                            current_data_row = current_data_row + 1
                            If n.Value = part_no_placeholder Then
                                wbXxX.Worksheets("XxX Sales Order").Range(part_no_col).Value = part_no_placeholder
                                wbXxX.Worksheets("XxX Sales Order").Range(ref_no_col).Value = part_no_placeholder
                                wbXxX.Worksheets("XxX Sales Order").Range(sup_part_no_col).Value = wbXxX.Worksheets("CUSTOMER_DATA").Range("B" & current_data_row).Value
                                success_counter = 1
                                Exit For
                            End If
                        Next n
                        If success_counter = 0 Then
                            MsgBox "ERROR ZzZ part " & part_no_placeholder & " was not found in Monitor. Make sure it has correct customer number in Sales tab in Update Part procedure."
                            wbXxX.Worksheets("XxX Sales Order").Range("41:" & CStr( Item_row_count)).Delete Shift:=xlUp
                            wbXxX.Worksheets("XxX Sales Order").Range("C40:P40").Value = "'"
                            wbZzZ.Close SaveChanges:=False
                            Exit Sub
                        End If
                        i.Value = ""
                        Exit For
                    End If
                Next i
            End If

            succesCounter = succesCounter + 1

            row_counter = row_counter + 1
            row_number = row_number + 1

            row_location = "C" & CStr(row_number)
            row_type = "D" & CStr(row_number)
            discount_col = "N" & CStr(row_number)
            setup_col = "O" & CStr(row_number)
            alloy_col = "P" & CStr(row_number)
            text_col = "H" & CStr(row_number)
            qty_col = "J" & CStr(row_number)
            unit_col = "K" & CStr(row_number)
            rev_col = "G" & CStr(row_number)
            del_col = "L" & CStr(row_number)
            price_col = "M" & CStr(row_number)
            part_no_col = "E" & CStr(row_number)
            sup_part_no_col = "F" & CStr(row_number)
            ref_no_col = "I" & CStr(row_number)

        Next position_number

        ' Declare order number to be used in name
        file_name = CStr(wbXxX.Worksheets("XxX Sales Order").Range("B5").Value)
        ' Declare file path
        file_path = Environ("USERPROFILE") & "\Desktop\XML Order nr " & file_name & ".xml"
        ' Check if file exists, if so delete and save new
        If Dir(file_path, vbDirectory) <> "" Then
            ' Remove readonly
            SetAttr file_path, vbNormal
            ' Delete file
            Kill file_path
            ' Save new
            wbXxX.XmlMaps("ORDERS420_mapa").Export Url:=file_path
        Else
            wbXxX.XmlMaps("ORDERS420_mapa").Export Url:=file_path
        End If

        ' Clear extra fields, leave only one and clear values
        conf_rows_counter = conf_rows_counter + 1
        wbXxX.Worksheets("XxX Sales Order").Range("41:" & CStr(row_number)).Delete Shift:=xlUp
        wbXxX.Worksheets("XxX Sales Order").Range("C40:P40").Value = "'"

        ' After all files are saved close AaA excel
        wbZzZ.Close SaveChanges:=False
    Else
        ' If other file is picked show error msg and close the file
        MsgBox "Incorrect file, please try again with AaA Excel."
        wbZzZ.Close SaveChanges:=False
    End If
    
    If succesCounter > 0 Then
        MsgBox "XML conversion complete."
    End If

End Sub

Sub ConvertForecastTxt540()

    Dim succesCounter As Integer
    succesCounter = 0
    ' Open selected file and set both workbooks to variables '
    Dim wbXxX As Workbook, wbForecast As Workbook
    Dim ws As Worksheet
    Dim vFile As Variant
    'Set source workbook'
    Set wbXxX = ActiveWorkbook
    'Open the target workbook
    vFile = Application.GetOpenFilename("(.xls),*.xls,(.xlsx),*.xlsx,(.xlsm),*.xlsm", 1, "Select Forecast Excel", , False)
    'if the user didnt select a file, exit sub'
    If TypeName(vFile) = "Boolean" Then Exit Sub
    Workbooks.Open vFile
    'Set targetworkbook
    Set wbForecast = ActiveWorkbook
'======================================================================================================================================================'
    'make sure a correct file is opened'
    If Left(Replace(CStr(wbForecast.Worksheets(1).Range("A3").Value), Chr$(160), Chr$(32)), 4) = "MAU:" Then
        ' refresh database of relateion customer -> our part number'
        wbXxX.Sheets("540_DATA").Range("A1").ListObject.QueryTable.Refresh BackgroundQuery:=False
'======================================================================================================================================================'
        Dim table_length As Long
        table_length = 12
        For Each i In wbForecast.Sheets(1).Range("A13:A10000")
            If i <> "" Then
                table_length = table_length + 1
            End If
            If i = "" Then
                Exit For
            End If
        Next i
        Dim table_width As Long
        table_width = 0
        For Each i In wbForecast.Sheets(1).Range("A12:HH12")
            If i = "Total" Then
                table_width = table_width + 1
                Exit For
            End If
            table_width = table_width + 1
        Next i
        Dim current_row As Long
        current_row = 13
        Dim current_col As Long
        current_col = 1
        Dim write_row As Long
        write_row = 1
        'WYSZUKIWANIE NASZEGO NUMERU WIĄZKI'
        Dim data_range As Long
        data_range = 1
        Dim part_no_placeholder As String
        part_no_placeholder = ""
        For Each i In wbXxX.Worksheets("540_DATA").Range("B1:B100000")
            If i.Value = "" Then
                Exit For
            End If
            data_range = data_range + 1
        Next i
        Dim our_harn_loc As Long
        Dim is_success As Long
        Dim row_to_del As Long
        row_to_del = 12
        For Each i In wbForecast.Sheets(1).Range("A13:A" & table_length)
            part_no_placeholder = i.Value
            our_harn_loc = 1
            is_success = 0
            row_to_del = row_to_del + 1
            For Each n In wbXxX.Worksheets("540_DATA").Range("A2:A" & data_range)
                our_harn_loc = our_harn_loc + 1
                If n.Value = i.Value Then
                    is_success = 1
                    i.Value = wbXxX.Worksheets("540_DATA").Range("B" & our_harn_loc).Value
                    Exit For
                End If
            Next n
            If is_success = 0 Then
                MsgBox "ERROR 540 Customer part number " & part_no_placeholder & " was not found in Monitor. Make sure it has correct customer number in Sales tab in Update Part procedure."
                wbForecast.Sheets(1).Range(row_to_del & ":" & row_to_del).ClearContents
            End If

        Next i
        'Kopiowanie wartości'
        For Each i In wbForecast.Sheets(1).Range("A13:A" & table_length)
            For Each n In wbForecast.Sheets(1).Range(Cells(current_row, current_col), Cells(current_row, table_width))
                If wbForecast.Sheets(1).Range(Cells(12, current_col), Cells(12, current_col)) = "F" And n.Value2 > 0 Then
                    wbXxX.Worksheets(3).Range("A" & write_row).Value = 540
                    wbXxX.Worksheets(3).Range("B" & write_row).Value = wbForecast.Sheets(1).Range(Cells(current_row, 1), Cells(current_row, 1)).Value
                    wbXxX.Worksheets(3).Range("C" & write_row).Value = wbForecast.Sheets(1).Range(Cells(11, current_col), Cells(11, current_col)).Value
                    wbXxX.Worksheets(3).Range("D" & write_row).Value = n.Value
                    wbXxX.Worksheets(3).Range("E" & write_row).Value = 4
                    wbXxX.Worksheets(3).Range("F" & write_row).Value = 540
                    write_row = write_row + 1
                End If
                current_col = current_col + 1
            Next n
            current_row = current_row + 1
            current_col = 1
        Next i
        'Formatowanie daty z formatu tygodniowego do daty. Na podstawie tygodnia dobiera dzień, zawsze poniedziałek SPRAWDZIĆ!!!'
        Dim forecast_length As Long
        forecast_length = 0
        For Each i In wbXxX.Worksheets(3).Range("C1:C100000")
            If i.Value = "" Then
                Exit For
            End If
            forecast_length = forecast_length + 1
        Next i
        Dim fc_row As Long
        fc_row = 1
        For Each i In wbXxX.Worksheets(3).Range("C1:C" & forecast_length)
            wbXxX.Worksheets(3).Range("G" & fc_row).Value = "20" & Left(CStr(i.Value), 2)
            wbXxX.Worksheets(3).Range("H" & fc_row).Value = Right(Left(CStr(i.Value), 4), 2)
            wbXxX.Worksheets(3).Range("I" & fc_row).Formula = "=DATE(G" & fc_row & ",1,-2)-WEEKDAY(DATE(G" & fc_row & ",1,1))+H" & fc_row & "*7"
            i.Value = wbXxX.Worksheets(3).Range("I" & fc_row).Value
            wbXxX.Worksheets(3).Range("C" & fc_row).NumberFormat = "yyyymmdd"
            fc_row = fc_row + 1
        Next i
        'usuń kolumny pomocniczne od formatowania'
        wbXxX.Worksheets(3).Columns("G:I").Delete Shift:=xlShiftToLeft
'======================================================================================================================================================'
        ' Declare file path'
        file_path = Environ("USERPROFILE") & "\Desktop\TXT Forecast 540.txt"

        wbXxX.Worksheets(3).SaveAs Filename:=file_path, FileFormat:=xlTextWindows, CreateBackup:=False

        ' Clear '
        wbXxX.Worksheets(3).Columns("A:F").Delete Shift:=xlShiftToLeft
        ' After all files are saved close Forecast excel '
        wbForecast.Close SaveChanges:=False
        succesCounter = succesCounter + 1
    Else
        ' If other file is picked show error msg and close the file '
        MsgBox "Incorrect file, please try again with AaA Excel."
        wbForecast.Close SaveChanges:=False
    End If
    If succesCounter > 0 Then
        MsgBox "TXT conversion complete."
    End If

End Sub

Sub ConvertForecastTxt548()

    Dim succesCounter As Integer
    succesCounter = 0
    ' Open selected file and set both workbooks to variables '
    Dim wbXxX As Workbook, wbForecast As Workbook
    Dim ws As Worksheet
    Dim vFile As Variant
    'Set source workbook'
    Set wbXxX = ActiveWorkbook
    'Open the target workbook
    vFile = Application.GetOpenFilename("(.xls),*.xls,(.xlsx),*.xlsx,(.xlsm),*.xlsm", 1, "Select Forecast Excel", , False)
    'if the user didnt select a file, exit sub'
    If TypeName(vFile) = "Boolean" Then Exit Sub
    Workbooks.Open vFile
    'Set targetworkbook
    Set wbForecast = ActiveWorkbook
'======================================================================================================================================================'
    'make sure a correct file is opened'
    If Replace(CStr(wbForecast.Worksheets(1).Range("A3").Value), Chr$(160), Chr$(32)) = "MAU: Stargard, Poland" Then
        ' refresh database of relateion customer -> our part number'
        wbXxX.Sheets("548_DATA").Range("A1").ListObject.QueryTable.Refresh BackgroundQuery:=False
'======================================================================================================================================================'
        Dim table_length As Long
        table_length = 12
        For Each i In wbForecast.Sheets(1).Range("A11:A10000")
            If i <> "" Then
                table_length = table_length + 1
            End If
            If i = "" Then
                Exit For
            End If
        Next i
        Dim table_width As Long
        table_width = 0
        For Each i In wbForecast.Sheets(1).Range("A10:HH10")
            If i = "" Then
                table_width = table_width + 1
                Exit For
            End If
            table_width = table_width + 1
        Next i
        Dim current_row As Long
        current_row = 11
        Dim current_col As Long
        current_col = 1
        Dim write_row As Long
        write_row = 1
        'WYSZUKIWANIE NASZEGO NUMERU WIĄZKI'
        Dim data_range As Long
        data_range = 1
        Dim part_no_placeholder As String
        part_no_placeholder = ""
        For Each i In wbXxX.Worksheets("548_DATA").Range("B1:B100000")
            If i.Value = "" Then
                Exit For
            End If
            data_range = data_range + 1
        Next i
        Dim our_harn_loc As Long
        Dim is_success As Long
        Dim row_to_del As Long
        row_to_del = 10
        For Each i In wbForecast.Sheets(1).Range("A11:A" & table_length)
            part_no_placeholder = i.Value
            our_harn_loc = 1
            is_success = 0
            row_to_del = row_to_del + 1
            For Each n In wbXxX.Worksheets("548_DATA").Range("A2:A" & data_range)
                our_harn_loc = our_harn_loc + 1
                If n.Value = i.Value Then
                    is_success = 1
                    i.Value = wbXxX.Worksheets("548_DATA").Range("B" & our_harn_loc).Value
                    Exit For
                End If
            Next n
            If is_success = 0 Then
                MsgBox "ERROR 548 Customer part number " & part_no_placeholder & " was not found in Monitor. Make sure it has correct customer number in Sales tab in Update Part procedure."
                wbForecast.Sheets(1).Range(row_to_del & ":" & row_to_del).ClearContents
            End If
        Next i
        'wstaw lata ponad tygodniami, tylko dla 548'
        Dim year_col_count As Long
        year_col_count = 9
        Dim forecast_year As Long
        forecast_year = CInt(Year(Date))
        Dim bug_prevention As Integer
        bug_prevention = 0
        wbForecast.Sheets(1).Range(Cells(8, year_col_count - 2), Cells(8, year_col_count - 2)).Value = 0
        For Each i In wbForecast.Sheets(1).Range(Cells(8, year_col_count), Cells(8, table_width - 1))
            If year_col_count Mod 2 = 1 Then
                If wbForecast.Sheets(1).Range(Cells(8, year_col_count - 2), Cells(8, year_col_count - 2)).Value = "" Or CLng(CStr(Left(Replace(Replace(CStr(wbForecast.Sheets(1).Range(Cells(8, year_col_count), Cells(8, year_col_count))), "W", ""), "-", ""), 2))) > CLng(CStr(Left(Replace(Replace(CStr(wbForecast.Sheets(1).Range(Cells(8, year_col_count - 2), Cells(8, year_col_count - 2))), "W", ""), "-", ""), 2))) Then
                    wbForecast.Sheets(1).Range(Cells(7, year_col_count), Cells(7, year_col_count)).Value = forecast_year
                End If
                If CLng(CStr(Left(Replace(Replace(CStr(wbForecast.Sheets(1).Range(Cells(8, year_col_count), Cells(8, year_col_count))), "W", ""), "-", ""), 2))) < CLng(CStr(Left(Replace(Replace(CStr(wbForecast.Sheets(1).Range(Cells(8, year_col_count - 2), Cells(8, year_col_count - 2))), "W", ""), "-", ""), 2))) Then
                    If bug_prevention = 0 Then
                        forecast_year = forecast_year + 1
                        bug_prevention = 1
                    End If
                    wbForecast.Sheets(1).Range(Cells(7, year_col_count), Cells(7, year_col_count)).Value = forecast_year
                End If
            End If
            year_col_count = year_col_count + 1
        Next i

        'Kopiowanie wartości'
        For Each i In wbForecast.Sheets(1).Range("A11:A" & table_length)
            For Each n In wbForecast.Sheets(1).Range(Cells(current_row, current_col), Cells(current_row, table_width))
                If wbForecast.Sheets(1).Range(Cells(10, current_col), Cells(10, current_col)) = "F" And n.Value2 > 0 Then
                    wbXxX.Worksheets(3).Range("A" & write_row).Value = 548
                    wbXxX.Worksheets(3).Range("B" & write_row).Value = wbForecast.Sheets(1).Range(Cells(current_row, 1), Cells(current_row, 1)).Value
                    wbXxX.Worksheets(3).Range("C" & write_row).Value = wbForecast.Sheets(1).Range(Cells(7, current_col), Cells(7, current_col)).Value & CLng(CStr(Left(Replace(Replace(CStr(wbForecast.Sheets(1).Range(Cells(8, current_col), Cells(8, current_col))), "W", ""), "-", ""), 2)))
                    wbXxX.Worksheets(3).Range("D" & write_row).Value = n.Value
                    wbXxX.Worksheets(3).Range("E" & write_row).Value = 4
                    wbXxX.Worksheets(3).Range("F" & write_row).Value = 548
                    write_row = write_row + 1
                End If
                current_col = current_col + 1
            Next n
            current_row = current_row + 1
            current_col = 1
        Next i
        'Formatowanie daty z formatu tygodniowego do daty. Na podstawie tygodnia dobiera dzień, zawsze poniedziałek SPRAWDZIĆ!!!'
        Dim forecast_length As Long
        forecast_length = 0
        For Each i In wbXxX.Worksheets(3).Range("C1:C100000")
            If i.Value = "" Then
                Exit For
            End If
            forecast_length = forecast_length + 1
        Next i
        Dim fc_row As Long
        fc_row = 1
        For Each i In wbXxX.Worksheets(3).Range("C1:C" & forecast_length)
            wbXxX.Worksheets(3).Range("G" & fc_row).Value = Left(CStr(i.Value), 4)
            wbXxX.Worksheets(3).Range("H" & fc_row).Value = Right(CStr(i.Value), Len(CStr(i.Value)) - 4)
            wbXxX.Worksheets(3).Range("I" & fc_row).Formula = "=DATE(G" & fc_row & ",1,-2)-WEEKDAY(DATE(G" & fc_row & ",1,2))+H" & fc_row & "*7"
            i.Value = wbXxX.Worksheets(3).Range("I" & fc_row).Value
            wbXxX.Worksheets(3).Range("C" & fc_row).NumberFormat = "yyyymmdd"
            fc_row = fc_row + 1
        Next i
        'usuń kolumny pomocniczne od formatowania'
        wbXxX.Worksheets(3).Columns("G:I").Delete Shift:=xlShiftToLeft
'======================================================================================================================================================'
        ' Declare file path'
        file_path = Environ("USERPROFILE") & "\Desktop\TXT Forecast 548.txt"
        ' Check if file exists, if so delete and save new'
        wbXxX.Worksheets(3).SaveAs Filename:=file_path, FileFormat:=xlTextWindows, CreateBackup:=False
        ' Clear '
        wbXxX.Worksheets(3).Columns("A:F").Delete Shift:=xlShiftToLeft
        ' After all files are saved close Forecast excel '
        wbForecast.Close SaveChanges:=False
        succesCounter = succesCounter + 1
    Else
        ' If other file is picked show error msg and close the file '
        MsgBox "Incorrect file, please try again with AaA Excel."
        wbForecast.Close SaveChanges:=False
    End If
    If succesCounter > 0 Then
        MsgBox "TXT conversion complete."
    End If

End Sub


Sub ConvertForecastTxt548line1()

    Dim succesCounter As Integer
    succesCounter = 0
    ' Open selected file and set both workbooks to variables '
    Dim wbXxX As Workbook, wbForecast As Workbook
    Dim ws As Worksheet
    Dim vFile As Variant
    'Set source workbook'
    Set wbXxX = ActiveWorkbook
    'Open the target workbook
    vFile = Application.GetOpenFilename("(.xls),*.xls,(.xlsx),*.xlsx,(.xlsm),*.xlsm", 1, "Select Forecast Excel", , False)
    'if the user didnt select a file, exit sub'
    If TypeName(vFile) = "Boolean" Then Exit Sub
    Workbooks.Open vFile
    'Set targetworkbook
    
    Set wbForecast = ActiveWorkbook
'======================================================================================================================================================'
    'make sure a correct file is opened'
    If Replace(CStr(wbForecast.Worksheets(1).Range("A3").Value), Chr$(160), Chr$(32)) = "MAU: Stargard, Poland" Then
        ' refresh database of relateion customer -> our part number'
        wbXxX.Sheets("548-1_DATA").Range("A1").ListObject.QueryTable.Refresh BackgroundQuery:=False
'======================================================================================================================================================'
        Dim table_length As Long
        table_length = 8
        For Each i In wbForecast.Sheets(1).Range("A9:A10000")
            If i <> "" Then
                table_length = table_length + 1
            End If
            If i = "" Then
                Exit For
            End If
        Next i
        Dim table_width As Long
        table_width = 0
        For Each i In wbForecast.Sheets(1).Range("A8:HH8")
            If i = "" Then
                table_width = table_width + 1
                Exit For
            End If
            table_width = table_width + 1
        Next i
        Dim current_row As Long
        current_row = 9
        Dim current_col As Long
        current_col = 1
        Dim write_row As Long
        write_row = 1
        'WYSZUKIWANIE NASZEGO NUMERU WIĄZKI'
        Dim data_range As Long
        data_range = 1
        Dim part_no_placeholder As String
        part_no_placeholder = ""
        For Each i In wbXxX.Worksheets("548-1_DATA").Range("B1:B100000")
            If i.Value = "" Then
                Exit For
            End If
            data_range = data_range + 1
        Next i
        Dim our_harn_loc As Long
        Dim is_success As Long
        Dim row_to_del As Long
        row_to_del = 8
        For Each i In wbForecast.Sheets(1).Range("A9:A" & table_length)
            part_no_placeholder = i.Value
            our_harn_loc = 1
            is_success = 0
            row_to_del = row_to_del + 1
            For Each n In wbXxX.Worksheets("548-1_DATA").Range("A2:A" & data_range)
                our_harn_loc = our_harn_loc + 1
                If n.Value = i.Value Then
                    is_success = 1
                    i.Value = wbXxX.Worksheets("548-1_DATA").Range("B" & our_harn_loc).Value
                    Exit For
                End If
            Next n
            If is_success = 0 Then
                MsgBox "ERROR 548-1 Customer part number " & part_no_placeholder & " was not found in Monitor. Make sure it has correct customer number in Sales tab in Update Part procedure."
                wbForecast.Sheets(1).Range(row_to_del & ":" & row_to_del).ClearContents
            End If
        Next i
        'wstaw lata ponad tygodniami, tylko dla 548'
        Dim year_col_count As Long
        year_col_count = 10
        Dim forecast_year As Long
        forecast_year = CInt(Year(Date))
        Dim bug_prevention As Integer
        bug_prevention = 0
        wbForecast.Sheets(1).Range(Cells(6, year_col_count - 2), Cells(6, year_col_count - 2)).Value = 0
        For Each i In wbForecast.Sheets(1).Range(Cells(6, year_col_count), Cells(6, table_width - 1))
            If year_col_count Mod 2 = 0 Then
                If CLng(CStr(Left(Replace(Replace(CStr(wbForecast.Sheets(1).Range(Cells(6, year_col_count), Cells(6, year_col_count))), "W", ""), "-", ""), 2))) > CLng(CStr(Left(Replace(Replace(CStr(wbForecast.Sheets(1).Range(Cells(6, year_col_count - 2), Cells(6, year_col_count - 2))), "W", ""), "-", ""), 2))) Or wbForecast.Sheets(1).Range(Cells(6, year_col_count - 2), Cells(6, year_col_count - 2)).Value = "" Then
                    wbForecast.Sheets(1).Range(Cells(5, year_col_count), Cells(5, year_col_count)).Value = forecast_year
                End If
                If CLng(CStr(Left(Replace(Replace(CStr(wbForecast.Sheets(1).Range(Cells(6, year_col_count), Cells(6, year_col_count))), "W", ""), "-", ""), 2))) < CLng(CStr(Left(Replace(Replace(CStr(wbForecast.Sheets(1).Range(Cells(6, year_col_count - 2), Cells(6, year_col_count - 2))), "W", ""), "-", ""), 2))) Then
                    If bug_prevention = 0 Then
                        forecast_year = forecast_year + 1
                        bug_prevention = 1
                    End If
                    wbForecast.Sheets(1).Range(Cells(5, year_col_count), Cells(5, year_col_count)).Value = forecast_year
                End If
            End If
            year_col_count = year_col_count + 1
        Next i
        'Kopiowanie wartości'
        For Each i In wbForecast.Sheets(1).Range("A9:A" & table_length)
            For Each n In wbForecast.Sheets(1).Range(Cells(current_row, current_col), Cells(current_row, table_width))
                If wbForecast.Sheets(1).Range(Cells(8, current_col), Cells(8, current_col)) = "F" And n.Value2 > 0 Then
                    wbXxX.Worksheets(3).Range("A" & write_row).Value = "548-1"
                    wbXxX.Worksheets(3).Range("B" & write_row).Value = wbForecast.Sheets(1).Range(Cells(current_row, 1), Cells(current_row, 1)).Value
                    wbXxX.Worksheets(3).Range("C" & write_row).Value = wbForecast.Sheets(1).Range(Cells(5, current_col), Cells(5, current_col)).Value & CLng(CStr(Left(Replace(Replace(CStr(wbForecast.Sheets(1).Range(Cells(6, current_col), Cells(6, current_col))), "W", ""), "-", ""), 2)))
                    wbXxX.Worksheets(3).Range("D" & write_row).Value = n.Value
                    wbXxX.Worksheets(3).Range("E" & write_row).Value = 4
                    wbXxX.Worksheets(3).Range("F" & write_row).Value = "548-1"
                    write_row = write_row + 1
                End If
                current_col = current_col + 1
            Next n
            current_row = current_row + 1
            current_col = 1
        Next i
        'Formatowanie daty z formatu tygodniowego do daty. Na podstawie tygodnia dobiera dzień, zawsze poniedziałek SPRAWDZIĆ!!!'
        Dim forecast_length As Long
        forecast_length = 0
        For Each i In wbXxX.Worksheets(3).Range("C1:C100000")
            If i.Value = "" Then
                Exit For
            End If
            forecast_length = forecast_length + 1
        Next i
        Dim fc_row As Long
        fc_row = 1
        For Each i In wbXxX.Worksheets(3).Range("C1:C" & forecast_length)
            wbXxX.Worksheets(3).Range("G" & fc_row).Value = Left(CStr(i.Value), 4)
            wbXxX.Worksheets(3).Range("H" & fc_row).Value = Right(CStr(i.Value), Len(CStr(i.Value)) - 4)
            wbXxX.Worksheets(3).Range("I" & fc_row).Formula = "=DATE(G" & fc_row & ",1,-2)-WEEKDAY(DATE(G" & fc_row & ",1,2))+H" & fc_row & "*7"
            i.Value = wbXxX.Worksheets(3).Range("I" & fc_row).Value
            wbXxX.Worksheets(3).Range("C" & fc_row).NumberFormat = "yyyymmdd"
            fc_row = fc_row + 1
        Next i
        'usuń kolumny pomocniczne od formatowania'
        wbXxX.Worksheets(3).Columns("G:I").Delete Shift:=xlShiftToLeft
'======================================================================================================================================================'
        ' Declare file path'
        file_path = Environ("USERPROFILE") & "\Desktop\TXT Forecast 548-1.txt"
        ' Check if file exists, if so delete and save new'
        wbXxX.Worksheets(3).SaveAs Filename:=file_path, FileFormat:=xlTextWindows, CreateBackup:=False

        ' Clear '
        wbXxX.Worksheets(3).Columns("A:F").Delete Shift:=xlShiftToLeft
        ' After all files are saved close Forecast excel '
        wbForecast.Close SaveChanges:=False
        succesCounter = succesCounter + 1
    Else
        ' If other file is picked show error msg and close the file '
        MsgBox "Incorrect file, please try again with AaA Excel."
        wbForecast.Close SaveChanges:=False
    End If
    If succesCounter > 0 Then
        MsgBox "TXT conversion complete."
    End If

End Sub






